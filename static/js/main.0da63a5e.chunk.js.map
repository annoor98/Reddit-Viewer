{"version":3,"sources":["components/Post.js","components/Viewer.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Post","e","target","style","display","src","this","props","post","data","url","marginLeft","marginRight","border","borderRadius","onError","imageMissing","alt","name","width","height","Component","Viewer","posts","map","item","key","Header","textAlign","backgroundColor","borderTopLeftRadius","borderTopRightRadius","App","state","subreddit","imageList","after","isAtBottom","didScroll","document","getElementById","offsetHeight","documentElement","scrollTop","setState","axios","get","then","response","concat","children","bind","changeSub","loadSubs","innerHTML","catch","error","window","addEventListener","removeEventListener","subName","value","className","id","borderBottomLeftRadius","borderBottomRightRadius","paddingBottom","fontSize","type","defaultValue","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0da63a5e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Post extends Component{\r\n\r\n\timageMissing(e){\r\n\t\te.target.style.display = \"none\";\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<img \r\n\t\t\t\t\tsrc={this.props.post.data.url}\r\n\t\t\t\t\tstyle={{marginLeft: \"auto\",\r\n\t\t\t\t\t\tmarginRight: \"auto\", \r\n\t\t\t\t\t\tdisplay:\"block\",\r\n\t\t\t\t\t\tborder:\"20px solid white\",\r\n\t\t\t\t\t\tborderRadius:\"20px\"\r\n\t\t\t\t\t\t}}\r\n\r\n\t\t\t\t\tonError={this.imageMissing} \r\n\t\t\t\t\talt={this.props.post.data.name} \r\n\t\t\t\t\twidth=\"60%\" \r\n\t\t\t\t\theight=\"auto\"\r\n\t\t\t\t/>\r\n\t\t\t\t<br/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Post;","import React, {Component} from 'react';\r\nimport Post from './Post';\r\n\r\nclass Viewer extends Component{\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\tthis.props.posts.map((item) =>(\r\n\t\t\t\t<Post key={item.data.name} post={item}/>\r\n\t\t\t\t))\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Viewer;","import React, {Component} from 'react';\r\n\r\nclass Header extends Component{\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div style={{\r\n\t\t\t\ttextAlign: \"center\", \r\n\t\t\t\tbackgroundColor: \"white\",\r\n\t\t\t\tborder: \"1px white solid\",\r\n\t\t\t\tborderTopLeftRadius: \"30px\",\r\n\t\t\t\tborderTopRightRadius: \"30px\"\r\n\t\t\t}}>\r\n\t\t\t\t<h1>Reddit Viewer</h1>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\nimport Viewer from './components/Viewer';\nimport Header from './components/Header';\nimport axios from 'axios';\n\nclass App extends Component{\n\n  /*Right now r/cute is the default subreddit\n    The after variable holds the id for the next set of content to load\n  */\n  state = {\n    subreddit: \"cute\",\n    imageList: [\n\n    ],\n\n    after: \"id\",\n    isAtBottom: false\n  }\n\n  constructor(props){\n    super(props);\n    this.didScroll = this.didScroll.bind(this);\n    this.changeSub = this.changeSub.bind(this);\n    this.loadSubs = this.loadSubs.bind(this);\n  }\n\n  //Initial Loading of the subreddit content\n  loadSubs(){\n    axios.get('https://www.reddit.com/r/' + this.state.subreddit + '/.json')\n      .then(response => {this.setState({imageList: response.data.data.children, after: response.data.data.after});\n                         document.getElementById(\"errorMessage\").innerHTML = \"\"})\n      .catch((error) => {document.getElementById(\"errorMessage\").innerHTML = \"Error retrieving data!\"});\n  }\n\n  componentDidMount(){\n    this.loadSubs();\n    window.addEventListener('scroll', this.didScroll);\n  };\n\n  componentWillUnmount(){\n    window.removeEventListener('scroll', this.didScroll);\n  };\n\n  changeSub(){\n    var subName = document.getElementById(\"subName\").value\n    this.setState({\n      subreddit: subName,\n      imageList: []\n    },\n    this.loadSubs\n    );\n  }\n\n  /*Event that checks how far the user scrolled through the page.\n    When roughly 75% of the screen height is reached, mroe content will get loaded.\n  */\n  didScroll = (e) =>{\n\n    if(document.getElementById(\"View\").offsetHeight * 0.75 <= document.documentElement.scrollTop && this.state.isAtBottom === false){\n\n      this.setState({isAtBottom: true});\n\n      axios.get('https://www.reddit.com/r/' + this.state.subreddit + '/.json?after=' + this.state.after)\n      .then(response => this.setState({\n            imageList: this.state.imageList.concat(response.data.data.children),\n            after: response.data.data.after\n          }));\n    }\n\n    if(document.getElementById(\"View\").offsetHeight * 0.75 > document.documentElement.scrollTop && this.state.isAtBottom === true){\n      this.setState({isAtBottom: false});\n    }\n  };\n\n  render(){\n    return(\n      <div className=\"App\" id=\"View\">\n        <Header />\n        <div id=\"search\" style={{\n        textAlign: \"center\", \n        backgroundColor: \"white\",\n        borderBottomLeftRadius: \"30px\",\n        borderBottomRightRadius: \"30px\",\n        paddingBottom: \"10px\",\n        fontSize: \"30px\"\n        }}>\n          <label>Subreddit: </label>\n          <input type=\"text\" id=\"subName\" defaultValue=\"cute\"/>\n          <p id=\"errorMessage\"></p>\n          <button onClick={this.changeSub}>View Images</button>\n        </div>\n        <Viewer posts={this.state.imageList}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}